// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UFF.Infra.Context;

#nullable disable

namespace UFF.Infra.Migrations
{
    [DbContext(typeof(UffContext))]
    [Migration("20250429030240_Adiciona estrelas entidade")]
    partial class Adicionaestrelasentidade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UFF.Domain.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgPath")
                        .HasColumnType("text")
                        .HasColumnName("ImgPath");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastUpdate");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RegisteringDate");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.HighLight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activated")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Icon");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastUpdate");

                    b.Property<string>("Phrase")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Phrase");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RegisteringDate");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("HighLights", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.OpeningHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activated")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan?>("End")
                        .HasColumnType("interval")
                        .HasColumnName("HoraFechamento");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastUpdate");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RegisteringDate");

                    b.Property<TimeSpan?>("Start")
                        .HasColumnType("interval")
                        .HasColumnName("HoraAbertura");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("DiaSemana");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("OpeningHours", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptOtherQueues")
                        .HasColumnType("boolean")
                        .HasColumnName("AcceptOtherQueues");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Address");

                    b.Property<bool>("AnswerOutOfOrder")
                        .HasColumnType("boolean")
                        .HasColumnName("AnswerOutOfOrder");

                    b.Property<bool>("AnswerScheduledTime")
                        .HasColumnType("boolean")
                        .HasColumnName("AnswerScheduledTime");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("City");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("Cnpj");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastUpdate");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("LogoPath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Number");

                    b.Property<bool>("OpenAutomatic")
                        .HasColumnType("boolean")
                        .HasColumnName("OpenAutomatic");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric")
                        .HasColumnName("Rating");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RegisteringDate");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("State");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Status");

                    b.Property<string>("StoreSubtitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("StoreSubtitle");

                    b.Property<int?>("TimeRemoval")
                        .HasColumnType("integer")
                        .HasColumnName("TimeRemoval");

                    b.Property<int>("Votes")
                        .HasColumnType("integer")
                        .HasColumnName("Votes");

                    b.Property<string>("WallPaperPath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("WallPaperPath");

                    b.Property<bool>("WhatsAppNotice")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsAppNotice");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("Address");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("City");

                    b.Property<string>("Cpf")
                        .HasColumnType("text")
                        .HasColumnName("Cpf");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastUpdate");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("Number");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("Phone");

                    b.Property<int>("Profile")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RegisteringDate");

                    b.Property<string>("StateId")
                        .HasColumnType("text")
                        .HasColumnName("StateId");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<int?>("StoreId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.HighLight", b =>
                {
                    b.HasOne("UFF.Domain.Entity.Store", "Store")
                        .WithMany("HighLights")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("UFF.Domain.Entity.OpeningHours", b =>
                {
                    b.HasOne("UFF.Domain.Entity.Store", "Store")
                        .WithMany("OpeningHours")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("UFF.Domain.Entity.Store", b =>
                {
                    b.HasOne("UFF.Domain.Entity.Category", "Category")
                        .WithMany("Stores")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UFF.Domain.Entity.User", "Owner")
                        .WithMany("Stores")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("UFF.Domain.Entity.Category", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("UFF.Domain.Entity.Store", b =>
                {
                    b.Navigation("HighLights");

                    b.Navigation("OpeningHours");
                });

            modelBuilder.Entity("UFF.Domain.Entity.User", b =>
                {
                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
