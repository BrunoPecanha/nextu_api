// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UFF.Infra.Context;

#nullable disable

namespace UFF.Infra.Migrations
{
    [DbContext(typeof(UffContext))]
    [Migration("20250528181517_adicion_coluna_e_renomeia")]
    partial class adicion_coluna_e_renomeia
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UFF.Domain.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("icon");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_path");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("RegisteringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registering_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_name");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("EstimatedWaitingTime")
                        .HasColumnType("interval")
                        .HasColumnName("estimated_start_time");

                    b.Property<bool>("IsPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_priority");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("MissingCustomerRemovalTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("missing_customer_removal_time");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<int>("QueueId")
                        .HasColumnType("integer")
                        .HasColumnName("queue_id");

                    b.Property<string>("RandomCustomerName")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("random_customer_name");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime>("RegisteringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registering_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("RemoveReason")
                        .HasColumnType("text")
                        .HasColumnName("remove_reason");

                    b.Property<string>("Review")
                        .HasColumnType("text")
                        .HasColumnName("review");

                    b.Property<DateTime?>("ServiceEndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("service_end_time");

                    b.Property<DateTime?>("ServiceStartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("service_start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TimeCalledInQueue")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_called_in_queue");

                    b.Property<DateTime>("TimeEnteredQueue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_entered_queue")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_customers_payment_id");

                    b.HasIndex("Position")
                        .HasDatabaseName("ix_queue_customers_position");

                    b.HasIndex("QueueId")
                        .HasDatabaseName("ix_customers_queue_id");

                    b.HasIndex("Rating")
                        .HasDatabaseName("ix_customers_rating")
                        .HasFilter("rating IS NOT NULL");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_queue_customers_status");

                    b.HasIndex("TimeEnteredQueue")
                        .HasDatabaseName("ix_queue_customers_time_entered");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_customers_user_id");

                    b.HasIndex("QueueId", "Position")
                        .IsDescending(false, true)
                        .HasDatabaseName("ix_queue_customers_queue_position");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.CustomerService", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<int>("QueueId")
                        .HasColumnType("integer")
                        .HasColumnName("queue_id");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("final_price");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registering_date");

                    b.HasKey("CustomerId", "ServiceId", "QueueId")
                        .HasName("pk_customer_services");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_customer_services_customer_id");

                    b.HasIndex("QueueId")
                        .HasDatabaseName("ix_customer_services_queue_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_customer_services_service_id");

                    b.ToTable("customer_services", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.EmployeeStore", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<DateTime>("RegisteringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registering_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<bool>("RequestAnswered")
                        .HasColumnType("boolean")
                        .HasColumnName("request_answered");

                    b.HasKey("EmployeeId", "StoreId")
                        .HasName("pk_employee_stores");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_employee_stores_user_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_employee_stores_is_active");

                    b.HasIndex("RegisteringDate")
                        .HasDatabaseName("ix_employee_stores_registering_date");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_employee_stores_store_id");

                    b.ToTable("employee_stores", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.HighLight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activated")
                        .HasColumnType("boolean")
                        .HasColumnName("activated");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("icon");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Phrase")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("phrase");

                    b.Property<DateTime>("RegisteringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registering_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.HasKey("Id")
                        .HasName("pk_highlights");

                    b.HasIndex("RegisteringDate")
                        .HasDatabaseName("ix_highlights_registering_date");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_highlights_store_id");

                    b.ToTable("highlights", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.OpeningHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activated")
                        .HasColumnType("boolean")
                        .HasColumnName("activated");

                    b.Property<TimeSpan?>("End")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<DateTime>("RegisteringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registering_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<TimeSpan?>("Start")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("week_day");

                    b.HasKey("Id")
                        .HasName("pk_opening_hours");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_opening_hours_store_id");

                    b.HasIndex("WeekDay")
                        .HasDatabaseName("ix_opening_hours_week_day");

                    b.HasIndex("WeekDay", "Start", "End")
                        .HasDatabaseName("ix_opening_hours_week_schedule");

                    b.ToTable("opening_hours", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("ImgPath")
                        .HasColumnType("text")
                        .HasColumnName("img_path");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registering_date");

                    b.HasKey("Id");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("UFF.Domain.Entity.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CloseReson")
                        .HasColumnType("varchar(40)")
                        .HasColumnName("close_reason");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closing_date");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PauseReason")
                        .HasColumnType("varchar(40)")
                        .HasColumnName("pause_reason");

                    b.Property<DateTime>("RegisteringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registering_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.HasKey("Id")
                        .HasName("pk_queues");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_queues_date");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_queues_status");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_queues_store_id");

                    b.HasIndex("StoreId", "Status")
                        .HasDatabaseName("ix_queues_store_status");

                    b.ToTable("queues", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("activated");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_path");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("RegisteringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registering_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.Property<bool>("VariablePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("variable_price");

                    b.Property<bool>("VariableTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("variable_time");

                    b.HasKey("Id")
                        .HasName("pk_services");

                    b.HasIndex("Activated")
                        .HasDatabaseName("ix_services_activated");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_services_category_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_services_name");

                    b.HasIndex("StoreId")
                        .HasDatabaseName("ix_services_store_id");

                    b.HasIndex("StoreId", "Activated")
                        .HasDatabaseName("ix_services_store_active");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("icon");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_path");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("RegisteringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registering_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.HasKey("Id")
                        .HasName("pk_service_categories");

                    b.HasIndex("ImgPath")
                        .HasDatabaseName("ix_service_categories_img_path")
                        .HasFilter("img_path IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_service_categories_name");

                    b.ToTable("service_categories", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptOtherQueues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("accept_other_queues");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<bool>("AnswerOutOfOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("answer_out_of_order");

                    b.Property<bool>("AnswerScheduledTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("answer_scheduled_time");

                    b.Property<bool>("AttendSimultaneously")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("attend_simultaneously");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("cnpj");

                    b.Property<string>("Facebook")
                        .HasColumnType("text")
                        .HasColumnName("facebook");

                    b.Property<string>("Instagram")
                        .HasColumnType("text")
                        .HasColumnName("instagram");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("logo_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("number");

                    b.Property<bool>("OpenAutomatic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("open_automatic");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<decimal>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(3,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("rating");

                    b.Property<DateTime>("RegisteringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registering_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Site")
                        .HasColumnType("text")
                        .HasColumnName("site");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("state");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("StoreSubtitle")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("store_subtitle");

                    b.Property<int?>("TimeRemoval")
                        .HasColumnType("integer")
                        .HasColumnName("time_removal");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("verified");

                    b.Property<int>("Votes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("votes");

                    b.Property<string>("WallPaperPath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("wallpaper_path");

                    b.Property<bool>("WhatsAppNotice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("whatsapp_notice");

                    b.Property<string>("Youtube")
                        .HasColumnType("text")
                        .HasColumnName("youtube");

                    b.HasKey("Id")
                        .HasName("pk_stores");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_stores_category_id");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("ix_stores_cnpj");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_stores_name");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_stores_owner_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_stores_status");

                    b.HasIndex("State", "City")
                        .HasDatabaseName("ix_stores_location");

                    b.ToTable("stores", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptAwaysMinorQueue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("look_for_minor_queue");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("number");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<int>("Profile")
                        .HasColumnType("integer")
                        .HasColumnName("profile");

                    b.Property<DateTime>("RegisteringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registering_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("ServicesProvided")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("services_provided");

                    b.Property<string>("StateId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("state_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("subtitle");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("ix_users_cpf");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_users_status");

                    b.HasIndex("StateId", "City")
                        .HasDatabaseName("ix_users_location");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("UFF.Domain.Entity.Customer", b =>
                {
                    b.HasOne("UFF.Domain.Entity.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_customers_payments");

                    b.HasOne("UFF.Domain.Entity.Queue", "Queue")
                        .WithMany("Customers")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_customers_queues");

                    b.HasOne("UFF.Domain.Entity.User", "User")
                        .WithMany("CustomerInstances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_customers_user");

                    b.Navigation("Payment");

                    b.Navigation("Queue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UFF.Domain.Entity.CustomerService", b =>
                {
                    b.HasOne("UFF.Domain.Entity.Customer", "Customer")
                        .WithMany("CustomerServices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_customer_services_customers");

                    b.HasOne("UFF.Domain.Entity.Queue", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_customer_services_queues");

                    b.HasOne("UFF.Domain.Entity.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_customer_services_services");

                    b.Navigation("Customer");

                    b.Navigation("Queue");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("UFF.Domain.Entity.EmployeeStore", b =>
                {
                    b.HasOne("UFF.Domain.Entity.User", "Employee")
                        .WithMany("EmployeeStore")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_stores_users");

                    b.HasOne("UFF.Domain.Entity.Store", "Store")
                        .WithMany("EmployeeStore")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_stores_stores");

                    b.Navigation("Employee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("UFF.Domain.Entity.HighLight", b =>
                {
                    b.HasOne("UFF.Domain.Entity.Store", "Store")
                        .WithMany("HighLights")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_highlights_store");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("UFF.Domain.Entity.OpeningHours", b =>
                {
                    b.HasOne("UFF.Domain.Entity.Store", "Store")
                        .WithMany("OpeningHours")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_opening_hours_store");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("UFF.Domain.Entity.Queue", b =>
                {
                    b.HasOne("UFF.Domain.Entity.User", "Employee")
                        .WithMany("Queues")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_queues_users");

                    b.HasOne("UFF.Domain.Entity.Store", "Store")
                        .WithMany("Queues")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_queues_stores");

                    b.Navigation("Employee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("UFF.Domain.Entity.Service", b =>
                {
                    b.HasOne("UFF.Domain.Entity.ServiceCategory", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_services_category");

                    b.HasOne("UFF.Domain.Entity.Store", "Store")
                        .WithMany("Services")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_services_store");

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("UFF.Domain.Entity.Store", b =>
                {
                    b.HasOne("UFF.Domain.Entity.Category", "Category")
                        .WithMany("Stores")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_stores_category");

                    b.HasOne("UFF.Domain.Entity.User", "Owner")
                        .WithMany("Stores")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_stores_owner");

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("UFF.Domain.Entity.Category", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("UFF.Domain.Entity.Customer", b =>
                {
                    b.Navigation("CustomerServices");
                });

            modelBuilder.Entity("UFF.Domain.Entity.Queue", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("UFF.Domain.Entity.ServiceCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("UFF.Domain.Entity.Store", b =>
                {
                    b.Navigation("EmployeeStore");

                    b.Navigation("HighLights");

                    b.Navigation("OpeningHours");

                    b.Navigation("Queues");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("UFF.Domain.Entity.User", b =>
                {
                    b.Navigation("CustomerInstances");

                    b.Navigation("EmployeeStore");

                    b.Navigation("Queues");

                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
